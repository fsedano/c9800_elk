input { 
  file {
    path => "/realtime_traces/traces*"
    start_position => "beginning"
    sincedb_path => "/root/data/sincedb.db"
    #sincedb_path => "/dev/null"
  }

 }

filter {
  grok {
    patterns_dir => ["/root/patterns"]
    match => { "message" => [
       "%{CLIENT_TRACE_HDR} MAC: %{MAC:client_mac}  %{GREEDYDATA:event_type} BSSID %{MAC:bssid}, old BSSID %{MAC:old_bssid}, WLAN %{NUMBER:wlan_id}, Slot %{NUMBER:slot} AP %{MAC:ap_mac_slot}, %{WORD_:ap_name}",
       "%{CLIENT_TRACE_HDR} MAC: %{MAC:client_mac}  %{GREEDYDATA:event_type} Method: %{GREEDYDATA:method} IP: %{IP:client_ip}",
       "%{CLIENT_TRACE_HDR} MAC: %{MAC:client_mac}  %{GREEDYDATA:event_type} Inside client %{WORD_:state} state",
       "%{CLIENT_TRACE_HDR} MAC: %{MAC:client_mac}  %{GREEDYDATA:event_type} Reason: %{WORD_:reason}"
       #"%{CLIENT_TRACE_HDR} MAC: %{MAC:client_mac}  %{GREEDYDATA:event_type}: %{WORD_:from_state} -> %{WORD_:to_state}"
      ]
    }
  }
  date {
        match => ["event_date" , "yy/MM/dd HH:mm:ss.SSS"]
  }
  
  if "_grokparsefailure" in [tags] { drop {} }
  fingerprint {
    source => "message"
    target => "[@metadata][fingerprint]"
    method => "MURMUR3"
  }

  if [event_type] =="Association received." {
    aggregate {
      task_id =>  "%{client_mac}"
      code => "map['ap_name'] = event.get('ap_name'); event.set('to_state', map['to_state'])"
      map_action => "create"
    }
  }

  if [event_type] =="Client IP learn successful." {
    aggregate {
      task_id =>  "%{client_mac}"
      code => "map['client_ip'] = event.get('client_ip'); event.set('ap_name', map['ap_name']); event.set('to_state', map['to_state'])"
      map_action => "update"
    }
  }



  if [event_type] =="process client run." {
    aggregate {
      task_id =>  "%{client_mac}"
      code => "event.set('ap_name', map['ap_name']); event.set('client_ip', map['client_ip']); event.set('to_state', map['to_state'])"
      map_action => "update"
    }
  }

  if [event_type] =="Re-Association received." {
    aggregate {
      task_id =>  "%{client_mac}"
      code => "map['ap_name'] = event.get('ap_name');event.set('client_ip', map['client_ip']); event.set('to_state', map['to_state'])"
      map_action => "update"
    }
  }

  if [event_type] =="Client state transition" {
    aggregate {
      task_id =>  "%{client_mac}"
      code => "event.set('ap_name', map['ap_name']); event.set('client_ip', map['client_ip']); map['to_state']=event.get('to_state')"
      map_action => "update"
    }
  }

  if [event_type] =="Client delete initiated." {
    aggregate {
      task_id =>  "%{client_mac}"
      code => "event.set('ap_name', map['ap_name']);event.set('client_ip', map['client_ip']); event.set('to_state', map['to_state'])"
      map_action => "update"
      #end_of_task => true
    }
  }



}
output {
  elasticsearch { 
    hosts => ["elasticsearch:9200"]
    document_id => "%{[@metadata][fingerprint]}"
  }
  stdout { codec => rubydebug }
}